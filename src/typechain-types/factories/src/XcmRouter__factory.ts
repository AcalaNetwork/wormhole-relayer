/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  XcmRouter,
  XcmRouterInterface,
  XcmInstructionsStruct,
} from "../../src/XcmRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract FeeRegistry",
        name: "fees",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "dest",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "weight",
            type: "bytes",
          },
        ],
        internalType: "struct XcmInstructions",
        name: "instructions",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "RouterCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "RouterDestroyed",
    type: "event",
  },
  {
    inputs: [],
    name: "fees",
    outputs: [
      {
        internalType: "contract FeeRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
    ],
    name: "route",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "routeNoFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200103f3803806200103f8339818101604052810190620000379190620003a7565b81806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503073ffffffffffffffffffffffffffffffffffffffff167f59490ddc6330cd50a9703c0b77827ff51b21e7a8592eb50d5252a4d20188cfd360405160405180910390a2508060016000820151816000019081620000d6919062000658565b506020820151816001019081620000ee919062000658565b5090505050506200073f565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013b826200010e565b9050919050565b60006200014f826200012e565b9050919050565b620001618162000142565b81146200016d57600080fd5b50565b600081519050620001818162000156565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d7826200018c565b810181811067ffffffffffffffff82111715620001f957620001f86200019d565b5b80604052505050565b60006200020e620000fa565b90506200021c8282620001cc565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156200024e576200024d6200019d565b5b62000259826200018c565b9050602081019050919050565b60005b838110156200028657808201518184015260208101905062000269565b60008484015250505050565b6000620002a9620002a38462000230565b62000202565b905082815260208101848484011115620002c857620002c76200022b565b5b620002d584828562000266565b509392505050565b600082601f830112620002f557620002f462000226565b5b81516200030784826020860162000292565b91505092915050565b60006040828403121562000329576200032862000187565b5b62000335604062000202565b9050600082015167ffffffffffffffff81111562000358576200035762000221565b5b6200036684828501620002dd565b600083015250602082015167ffffffffffffffff8111156200038d576200038c62000221565b5b6200039b84828501620002dd565b60208301525092915050565b60008060408385031215620003c157620003c062000104565b5b6000620003d18582860162000170565b925050602083015167ffffffffffffffff811115620003f557620003f462000109565b5b620004038582860162000310565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200046057607f821691505b60208210810362000476576200047562000418565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004a1565b620004ec8683620004a1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000539620005336200052d8462000504565b6200050e565b62000504565b9050919050565b6000819050919050565b620005558362000518565b6200056d620005648262000540565b848454620004ae565b825550505050565b600090565b6200058462000575565b620005918184846200054a565b505050565b5b81811015620005b957620005ad6000826200057a565b60018101905062000597565b5050565b601f8211156200060857620005d2816200047c565b620005dd8462000491565b81016020851015620005ed578190505b62000605620005fc8562000491565b83018262000596565b50505b505050565b600082821c905092915050565b60006200062d600019846008026200060d565b1980831691505092915050565b60006200064883836200061a565b9150826002028217905092915050565b62000663826200040d565b67ffffffffffffffff8111156200067f576200067e6200019d565b5b6200068b825462000447565b62000698828285620005bd565b600060209050601f831160018114620006d05760008415620006bb578287015190505b620006c785826200063a565b86555062000737565b601f198416620006e0866200047c565b60005b828110156200070a57848901518255600182019150602085019450602081019050620006e3565b868310156200072a578489015162000726601f8916826200061a565b8355505b6001600288020188555050505b505050505050565b6108f0806200074f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806338bb09c9146100465780639af1d35a14610062578063c0f36cb014610080575b600080fd5b610060600480360381019061005b9190610460565b61009c565b005b61006a61010c565b60405161007791906104ec565b60405180910390f35b61009a60048036038101906100959190610533565b610130565b005b6100a58161024b565b60004703610109573073ffffffffffffffffffffffffffffffffffffffff167f4d71224652a46a6b2a06bc43b09b55d157972d227c848693032b32aa7d5aefe860405160405180910390a23373ffffffffffffffffffffffffffffffffffffffff16ff5b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b88c9148846040518263ffffffff1660e01b815260040161018c9190610582565b602060405180830381865afa1580156101a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cd91906105d3565b905060008111610212576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102099061065d565b60405180910390fd5b61023d82828573ffffffffffffffffffffffffffffffffffffffff166103539092919063ffffffff16565b6102468361009c565b505050565b61080973ffffffffffffffffffffffffffffffffffffffff1663e9b07bbf828373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102a39190610582565b602060405180830381865afa1580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e491906105d3565b6001600001600180016040518563ffffffff1660e01b815260040161030c9493929190610796565b6020604051808303816000875af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190610821565b5050565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc9061089a565b60405180910390fd5b50505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061041b826103f0565b9050919050565b600061042d82610410565b9050919050565b61043d81610422565b811461044857600080fd5b50565b60008135905061045a81610434565b92915050565b600060208284031215610476576104756103eb565b5b60006104848482850161044b565b91505092915050565b6000819050919050565b60006104b26104ad6104a8846103f0565b61048d565b6103f0565b9050919050565b60006104c482610497565b9050919050565b60006104d6826104b9565b9050919050565b6104e6816104cb565b82525050565b600060208201905061050160008301846104dd565b92915050565b61051081610410565b811461051b57600080fd5b50565b60008135905061052d81610507565b92915050565b6000806040838503121561054a576105496103eb565b5b60006105588582860161044b565b92505060206105698582860161051e565b9150509250929050565b61057c81610410565b82525050565b60006020820190506105976000830184610573565b92915050565b6000819050919050565b6105b08161059d565b81146105bb57600080fd5b50565b6000815190506105cd816105a7565b92915050565b6000602082840312156105e9576105e86103eb565b5b60006105f7848285016105be565b91505092915050565b600082825260208201905092915050565b7f7a65726f20666565000000000000000000000000000000000000000000000000600082015250565b6000610647600883610600565b915061065282610611565b602082019050919050565b600060208201905081810360008301526106768161063a565b9050919050565b6106868161059d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106d357607f821691505b6020821081036106e6576106e561068c565b5b50919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6000815461071f816106bb565b61072981866106ec565b94506001821660008114610744576001811461075a5761078d565b60ff19831686528115156020028601935061078d565b610763856106fd565b60005b8381101561078557815481890152600182019150602081019050610766565b808801955050505b50505092915050565b60006080820190506107ab6000830187610573565b6107b8602083018661067d565b81810360408301526107ca8185610712565b905081810360608301526107de8184610712565b905095945050505050565b60008115159050919050565b6107fe816107e9565b811461080957600080fd5b50565b60008151905061081b816107f5565b92915050565b600060208284031215610837576108366103eb565b5b60006108458482850161080c565b91505092915050565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b6000610884600f83610600565b915061088f8261084e565b602082019050919050565b600060208201905081810360008301526108b381610877565b905091905056fea2646970667358221220d4fb4841eb208e5e1abce6eae453b885fb4d0ec12687ccffbc4470a5eb50e0fb64736f6c63430008120033";

type XcmRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XcmRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XcmRouter__factory extends ContractFactory {
  constructor(...args: XcmRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    fees: PromiseOrValue<string>,
    instructions: XcmInstructionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<XcmRouter> {
    return super.deploy(
      fees,
      instructions,
      overrides || {}
    ) as Promise<XcmRouter>;
  }
  override getDeployTransaction(
    fees: PromiseOrValue<string>,
    instructions: XcmInstructionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(fees, instructions, overrides || {});
  }
  override attach(address: string): XcmRouter {
    return super.attach(address) as XcmRouter;
  }
  override connect(signer: Signer): XcmRouter__factory {
    return super.connect(signer) as XcmRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XcmRouterInterface {
    return new utils.Interface(_abi) as XcmRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XcmRouter {
    return new Contract(address, _abi, signerOrProvider) as XcmRouter;
  }
}
