/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FeeRegistry,
  FeeRegistryInterface,
  FeeStruct,
} from "../../src/FeeRegistry";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Fee[]",
        name: "myArra",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105cd3803806105cd8339818101604052810190610032919061032d565b60005b81518110156100d05781818151811061005157610050610376565b5b60200260200101516020015160008084848151811061007357610072610376565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080806100c8906103d4565b915050610035565b505061041c565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610139826100f0565b810181811067ffffffffffffffff8211171561015857610157610101565b5b80604052505050565b600061016b6100d7565b90506101778282610130565b919050565b600067ffffffffffffffff82111561019757610196610101565b5b602082029050602081019050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101dd826101b2565b9050919050565b6101ed816101d2565b81146101f857600080fd5b50565b60008151905061020a816101e4565b92915050565b6000819050919050565b61022381610210565b811461022e57600080fd5b50565b6000815190506102408161021a565b92915050565b60006040828403121561025c5761025b6101ad565b5b6102666040610161565b90506000610276848285016101fb565b600083015250602061028a84828501610231565b60208301525092915050565b60006102a96102a48461017c565b610161565b905080838252602082019050604084028301858111156102cc576102cb6101a8565b5b835b818110156102f557806102e18882610246565b8452602084019350506040810190506102ce565b5050509392505050565b600082601f830112610314576103136100eb565b5b8151610324848260208601610296565b91505092915050565b600060208284031215610343576103426100e1565b5b600082015167ffffffffffffffff811115610361576103606100e6565b5b61036d848285016102ff565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103df82610210565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610411576104106103a5565b5b600182019050919050565b6101a28061042b6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b88c914814610030575b600080fd5b61004a6004803603810190610045919061010b565b610060565b6040516100579190610151565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d8826100ad565b9050919050565b6100e8816100cd565b81146100f357600080fd5b50565b600081359050610105816100df565b92915050565b600060208284031215610121576101206100a8565b5b600061012f848285016100f6565b91505092915050565b6000819050919050565b61014b81610138565b82525050565b60006020820190506101666000830184610142565b9291505056fea2646970667358221220b8a4670272621f1f62678f98642ce666e07fb37fd570f1feb805e14f5c45f42f64736f6c63430008120033";

type FeeRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeRegistry__factory extends ContractFactory {
  constructor(...args: FeeRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    myArra: FeeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeRegistry> {
    return super.deploy(myArra, overrides || {}) as Promise<FeeRegistry>;
  }
  override getDeployTransaction(
    myArra: FeeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(myArra, overrides || {});
  }
  override attach(address: string): FeeRegistry {
    return super.attach(address) as FeeRegistry;
  }
  override connect(signer: Signer): FeeRegistry__factory {
    return super.connect(signer) as FeeRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeRegistryInterface {
    return new utils.Interface(_abi) as FeeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeRegistry {
    return new Contract(address, _abi, signerOrProvider) as FeeRegistry;
  }
}
