/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MockXtokens, MockXtokensInterface } from "../../src/MockXtokens";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "currencyId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "dest",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061050c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e9b07bbf14610030575b600080fd5b61004a600480360381019061004591906102dc565b610060565b6040516100579190610396565b60405180910390f35b6000808361006d9061041a565b60601c90508573ffffffffffffffffffffffffffffffffffffffff166333bebb773383886040518463ffffffff1660e01b81526004016100af9392919061049f565b600060405180830381600087803b1580156100c957600080fd5b505af11580156100dd573d6000803e3d6000fd5b505050506001915050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012d82610102565b9050919050565b61013d81610122565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b6000819050919050565b61017381610160565b811461017e57600080fd5b50565b6000813590506101908161016a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101e9826101a0565b810181811067ffffffffffffffff82111715610208576102076101b1565b5b80604052505050565b600061021b6100ee565b905061022782826101e0565b919050565b600067ffffffffffffffff821115610247576102466101b1565b5b610250826101a0565b9050602081019050919050565b82818337600083830152505050565b600061027f61027a8461022c565b610211565b90508281526020810184848401111561029b5761029a61019b565b5b6102a684828561025d565b509392505050565b600082601f8301126102c3576102c2610196565b5b81356102d384826020860161026c565b91505092915050565b600080600080608085870312156102f6576102f56100f8565b5b60006103048782880161014b565b945050602061031587828801610181565b935050604085013567ffffffffffffffff811115610336576103356100fd565b5b610342878288016102ae565b925050606085013567ffffffffffffffff811115610363576103626100fd565b5b61036f878288016102ae565b91505092959194509250565b60008115159050919050565b6103908161037b565b82525050565b60006020820190506103ab6000830184610387565b92915050565b600081519050919050565b6000819050602082019050919050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600061040482516103cc565b80915050919050565b600082821b905092915050565b6000610425826103b1565b8261042f846103bc565b905061043a816103f8565b9250601482101561047a576104757fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360140360080261040d565b831692505b5050919050565b61048a81610122565b82525050565b61049981610160565b82525050565b60006060820190506104b46000830186610481565b6104c16020830185610481565b6104ce6040830184610490565b94935050505056fea26469706673582212200983206f9443082301189cfa169bad0da6622f2c3c7dcffa1262cc3a96cbbec864736f6c63430008120033";

type MockXtokensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockXtokensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockXtokens__factory extends ContractFactory {
  constructor(...args: MockXtokensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockXtokens> {
    return super.deploy(overrides || {}) as Promise<MockXtokens>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockXtokens {
    return super.attach(address) as MockXtokens;
  }
  override connect(signer: Signer): MockXtokens__factory {
    return super.connect(signer) as MockXtokens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockXtokensInterface {
    return new utils.Interface(_abi) as MockXtokensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockXtokens {
    return new Contract(address, _abi, signerOrProvider) as MockXtokens;
  }
}
