/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type WormholeInstructionsStruct = {
  recipientChain: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  arbiterFee: PromiseOrValue<BigNumberish>;
};

export type WormholeInstructionsStructOutput = [
  number,
  string,
  number,
  BigNumber
] & {
  recipientChain: number;
  recipient: string;
  nonce: number;
  arbiterFee: BigNumber;
};

export type XcmInstructionsStruct = {
  dest: PromiseOrValue<BytesLike>;
  weight: PromiseOrValue<BytesLike>;
};

export type XcmInstructionsStructOutput = [string, string] & {
  dest: string;
  weight: string;
};

export interface FactoryInterface extends utils.Interface {
  functions: {
    "deployWormholeRouter(address,(uint16,bytes32,uint32,uint256),address)": FunctionFragment;
    "deployWormholeRouterAndRoute(address,(uint16,bytes32,uint32,uint256),address,address)": FunctionFragment;
    "deployWormholeRouterAndRouteNoFee(address,(uint16,bytes32,uint32,uint256),address,address)": FunctionFragment;
    "deployXcmRouter(address,(bytes,bytes))": FunctionFragment;
    "deployXcmRouterAndRoute(address,(bytes,bytes),address)": FunctionFragment;
    "deployXcmRouterAndRouteNoFee(address,(bytes,bytes),address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployWormholeRouter"
      | "deployWormholeRouterAndRoute"
      | "deployWormholeRouterAndRouteNoFee"
      | "deployXcmRouter"
      | "deployXcmRouterAndRoute"
      | "deployXcmRouterAndRouteNoFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployWormholeRouter",
    values: [
      PromiseOrValue<string>,
      WormholeInstructionsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWormholeRouterAndRoute",
    values: [
      PromiseOrValue<string>,
      WormholeInstructionsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWormholeRouterAndRouteNoFee",
    values: [
      PromiseOrValue<string>,
      WormholeInstructionsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployXcmRouter",
    values: [PromiseOrValue<string>, XcmInstructionsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deployXcmRouterAndRoute",
    values: [
      PromiseOrValue<string>,
      XcmInstructionsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployXcmRouterAndRouteNoFee",
    values: [
      PromiseOrValue<string>,
      XcmInstructionsStruct,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployWormholeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWormholeRouterAndRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWormholeRouterAndRouteNoFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployXcmRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployXcmRouterAndRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployXcmRouterAndRouteNoFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployWormholeRouter(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployWormholeRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployWormholeRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployXcmRouter(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployXcmRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployXcmRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployWormholeRouter(
    fees: PromiseOrValue<string>,
    inst: WormholeInstructionsStruct,
    tokenBridgeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployWormholeRouterAndRoute(
    fees: PromiseOrValue<string>,
    inst: WormholeInstructionsStruct,
    tokenBridgeAddress: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployWormholeRouterAndRouteNoFee(
    fees: PromiseOrValue<string>,
    inst: WormholeInstructionsStruct,
    tokenBridgeAddress: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployXcmRouter(
    fees: PromiseOrValue<string>,
    inst: XcmInstructionsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployXcmRouterAndRoute(
    fees: PromiseOrValue<string>,
    inst: XcmInstructionsStruct,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployXcmRouterAndRouteNoFee(
    fees: PromiseOrValue<string>,
    inst: XcmInstructionsStruct,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployWormholeRouter(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployWormholeRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployWormholeRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployXcmRouter(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    deployXcmRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployXcmRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deployWormholeRouter(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployWormholeRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployWormholeRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployXcmRouter(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployXcmRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployXcmRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployWormholeRouter(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployWormholeRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployWormholeRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: WormholeInstructionsStruct,
      tokenBridgeAddress: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployXcmRouter(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployXcmRouterAndRoute(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployXcmRouterAndRouteNoFee(
      fees: PromiseOrValue<string>,
      inst: XcmInstructionsStruct,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
